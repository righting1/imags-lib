# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: 手动部署

on: 
  workflow_dispatch:  # 手动触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 2. 设置 Java 环境
      - name: 设置 Java 环境
        uses: actions/setup-java@v3
        with:
          java-version: '8'  # 根据你的项目选择 Java 版本
          distribution: 'temurin'
      # 3. 编译项目
      - name: 编译项目
        run: mvn clean package

      # 4. 上传文件到服务器
      - name: 上传文件到服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}     # 引用 GitHub Secrets 中的服务器 IP
          username: ${{ secrets.SERVER_USER }} # 引用 GitHub Secrets 中的用户名
          password: ${{ secrets.SERVER_PASS }} # 引用 GitHub Secrets 中的密码
          source: "./docker-compose.yml,./Dockerfile,./target/*.jar"
          target: /usr/local/projects/imags-lib-all/    # 上传到服务器的目标目录
          overwrite: true  #文件覆盖模式

      # 5. 通过ssh执行shell命令，在服务器上构建镜像并部署
      - name: 在服务器上构建镜像并部署
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}     # 引用 GitHub Secrets 中的服务器 IP
          username: ${{ secrets.SERVER_USER }} # 引用 GitHub Secrets 中的用户名
          password: ${{ secrets.SERVER_PASS }} # 引用 GitHub Secrets 中的密码
          script: |
            cd /usr/local/projects/imags-lib-all/
            docker-compose down                  # 停止现有服务
            docker-compose up -d --build         # 以守护模式启动服务 并且强制构建一次镜像

